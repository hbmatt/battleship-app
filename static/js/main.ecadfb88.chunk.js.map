{"version":3,"sources":["factories/Ship.js","factories/Gameboard.js","factories/Player.js","components/Column.js","components/Board.js","components/Ship.js","components/Ships.js","components/Scoreboard.js","components/Game.js","App.js","index.js"],"names":["Ship","length","hit","num","hits","isSunk","every","i","this","Array","fill","Gameboard","placeShip","coordinates","direction","areAllPlaced","isAlreadyPlaced","ship","x","y","isOffBoard","isOccupied","id","ships","push","position","grid","autoplaceShips","lengths","coord","getRandCoord","getRandDirection","success","resetShips","receiveAttack","indexOf","areAllSunk","obj","existing","reduce","prev","curr","Math","floor","random","Player","name","attack","isLegal","successfulAttack","getAdjacentCoords","attackQueue","shift","attacks","enemy","board","attackedShip","find","pos","offset","Column","getClass","cell","props","player","completed","getText","className","col","reverse","map","key","colId","onClick","getAttack","bind","onDragEnter","e","Component","Board","onDragLeave","Ships","state","rotateShips","setState","draggable","onDragStart","onDragEnd","title","autoPlace","clearBoard","Scoreboard","setClass","computer","Game","useState","setPlayer","setComputer","turn","setTurn","setCompleted","winner","setWinner","shipsPlaced","setShipsPlaced","computerAttack","updateComputer","isGameOver","declareWinner","resetGame","dragItem","useRef","dragOverItem","updatePlayer","current","console","log","split","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecadfb88.chunk.js","sourcesContent":["class Ship {\n  constructor(length) {\n    this.length = length;\n    this.hits = Array(length).fill(0);\n  }\n\n  hit = (num) => {\n    this.hits[num - 1] = 1;\n  };\n\n  isSunk = () => {\n    return this.hits.every((i) => i === 1) ? true : false;\n  };\n}\n\nexport { Ship };\n","import { Ship } from \"./Ship\";\n\nclass Gameboard {\n  constructor() {\n    this.grid = [];\n    for (let i = 0; i < 10; i++) {\n      this.grid[i] = Array(10).fill(0);\n    }\n    this.ships = [];\n  }\n\n  placeShip = (length, coordinates, direction) => {\n    if (this.areAllPlaced()) return;\n    if (this.isAlreadyPlaced(length)) return;\n\n    const ship = new Ship(length);\n    const x = coordinates[0] - 1;\n    const y = coordinates[1] - 1;\n\n    if (\n      this.isOffBoard(direction, x, y, length) ||\n      this.isOccupied(direction, x, y, length)\n    ) {\n      return false;\n    }\n\n    const id = this.ships.length + 1;\n    this.ships.push({ id, ship, position: [] });\n\n    for (let i = 0; i < ship.length; i++) {\n      if (direction === \"horizontal\") {\n        this.grid[x + i][y] = id;\n        this.ships[id - 1].position.push(`${x + i}, ${y}`);\n      } else {\n        this.grid[x][y - i] = id;\n        this.ships[id - 1].position.push(`${x}, ${y - i}`);\n      }\n    }\n  };\n\n  autoplaceShips = () => {\n    let lengths = [2,3,3,4,5];\n    let i = 4;\n\n    while (this.ships.length < 5) {\n      let coord = this.getRandCoord();\n      let direction = this.getRandDirection();\n\n      let success = this.placeShip(lengths[i], coord, direction);\n\n      while (success === false) {\n        coord = this.getRandCoord();\n        direction = this.getRandDirection();\n        success = this.placeShip(lengths[i], coord, direction);\n      }\n      \n      i--;\n    }\n  }\n\n  resetShips = () => {\n    this.ships = [];\n    this.grid = [];\n    for (let i = 0; i < 10; i++) {\n      this.grid[i] = Array(10).fill(0);\n    }\n  }\n \n  receiveAttack = (coordinates) => {\n    const x = coordinates[0] - 1;\n    const y = coordinates[1] - 1;\n\n    if (this.grid[x][y] > 0) {\n      const id = this.grid[x][y];\n      const position = this.ships[id - 1].position.indexOf(`${x}, ${y}`);\n      this.ships[id - 1].ship.hit(position + 1);\n      this.grid[x][y] = \"X\";\n      return id;\n    } else {\n      this.grid[x][y] = \"O\";\n      return false;\n    }\n  };\n\n  areAllSunk = () => {\n    return this.ships.every((obj) => obj.ship.isSunk() === true) ? true : false;\n  };\n\n  isOffBoard(direction, x, y, length) {\n    return (direction === \"horizontal\" && x + length - 1 < 10) ||\n      (direction === \"vertical\" && y - length + 1 >= 0)\n      ? false\n      : true;\n  }\n\n  isOccupied(direction, x, y, length) {\n    for (let i = 0; i < length; i++) {\n      if (direction === \"horizontal\") {\n        if (this.grid[x + i][y] !== 0) {\n          return true;\n        }\n      } else {\n        if (this.grid[x][y - i] !== 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  areAllPlaced() {\n    return this.ships.length === 5 ? true : false\n  }\n\n  isAlreadyPlaced(length) {\n    let existing = this.ships.reduce((prev, curr) => {\n      if (curr.ship.length === length) {\n        prev.push(true)\n      }\n      return prev\n    }, []);\n\n    if (length === 3) {\n      return existing.length > 1 ? true : false\n    } else {\n      return existing.length > 0 ? true : false\n    }\n  }\n\n  getRandCoord() {\n    return [Math.floor(Math.random() * 10) + 1, Math.floor(Math.random() * 10) + 1];\n  }\n\n  getRandDirection() {\n    return Math.floor(Math.random() * 2) === 0 ? 'horizontal' : 'vertical';\n  }\n}\n\nexport { Gameboard };\n","import { Gameboard } from \"./Gameboard\";\n\nclass Player {\n  constructor(name) {\n    this.name = name;\n    this.enemy = \"\";\n    this.board = new Gameboard();\n    this.attacks = [];\n    this.successfulAttack = null;\n    this.attackQueue = [];\n    this.attackedShip = null;\n  }\n\n  attack = (coordinates = this.getRandCoord()) => {\n    if (this.name === \"computer\" && !this.isLegal(coordinates)) return false;\n\n    if (this.successfulAttack) this.getAdjacentCoords();\n\n    if (this.attackQueue.length > 0) {\n      coordinates = this.attackQueue[0];\n      this.attackQueue.shift();\n    }\n\n    this.attacks.push(`${coordinates[0] - 1}, ${coordinates[1] - 1}`);\n    let id = this.enemy.board.receiveAttack(coordinates);\n\n    if (this.name === \"computer\" && id) {\n      this.successfulAttack = coordinates;\n      this.attackedShip = this.enemy.board.ships[id - 1].ship;\n    } else {\n      this.successfulAttack = null;\n    }\n\n    if (this.attackedShip) {\n      if (this.attackedShip.isSunk()) {\n        this.successfulAttack = null;\n        this.attackQueue = [];\n        this.attackedShip = null;\n      }\n    }\n  };\n\n  isLegal = (coordinates) => {\n    return this.attacks.find(\n      (pos) => pos === `${coordinates[0] - 1}, ${coordinates[1] - 1}`\n    )\n      ? false\n      : true;\n  }\n\n  getRandCoord() {\n    return [Math.floor(Math.random() * 10) + 1, Math.floor(Math.random() * 10) + 1];\n  }\n\n  getAdjacentCoords() {\n    let offset = [[-1,0],[0,1],[1,0],[0,-1]];\n\n    for (let i = 0; i < 4; i++) {\n      let x = this.successfulAttack[0] + offset[i][0];\n      let y = this.successfulAttack[1] + offset[i][1];\n      \n      if (x >= 1 && x <= 10 && y >= 1 && y <= 10 && this.isLegal([x,y])) {\n        this.attackQueue.push([x,y]);\n      }\n    }\n  }\n}\n\nexport { Player };\n","import React, { Component } from \"react\";\n\nexport class Column extends Component {\n  getClass = (cell) => {\n    if (this.props.player.name === \"computer\") {\n      switch (cell) {\n        case \"X\":\n          return \"cell hit\";\n        case \"O\":\n          return \"cell miss\";\n        default:\n          return this.props.completed ? \"cell\" : \"cell open\";\n      }\n    }\n\n    switch (cell) {\n      case 1:\n        return \"cell carrier\";\n      case 2:\n        return \"cell battleship\";\n      case 3:\n        return \"cell destroyer\";\n      case 4:\n        return \"cell submarine\";\n      case 5:\n        return \"cell patrol\";\n      case \"X\":\n        return \"cell hit\";\n      case \"O\":\n        return \"cell miss\";\n      default:\n        return \"cell\";\n    }\n  };\n\n  getText = (cell) => {\n    switch (cell) {\n      case \"O\":\n        return <i className=\"fa fa-circle\"></i>;\n      default:\n        return \"\";\n    }\n  };\n\n  render() {\n    return [...this.props.col].reverse().map((cell, id) => (\n      <div\n        key={`${this.props.colId}${10 - id}`}\n        className={this.getClass(cell)}\n        onClick={this.props.getAttack.bind(\n          this,\n          `${this.props.colId},${10 - id}`\n        )}\n        onDragEnter={(e) => this.props.player.name === 'player' ? this.props.onDragEnter(e, [this.props.colId, 10 - id]) : ''}\n      >\n        {this.getText(cell)}\n      </div>\n    ));\n  }\n}\n\nexport default Column;\n","import React, { Component } from \"react\";\n\nimport Column from \"./Column\";\n\nexport class Board extends Component {\n  render() {\n    return [...this.props.player.board.grid].map((col, id) => (\n      <div key={\"column\" + id} className=\"column\">\n        <Column\n          key={\"col\" + id}\n          col={col}\n          colId={id + 1}\n          player={this.props.player}\n          getAttack={this.props.getAttack}\n          completed={this.props.completed}\n          onDragEnter={this.props.onDragEnter}\n          onDragLeave={(e) => this.props.player.name === 'player' ? this.props.onDragLeave(e) : ''}\n        />\n      </div>\n    ));\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react'\n\nexport class Ship extends Component {\n  render() {\n    return this.props.length.map((cell,id) => (\n      <div key={id} className=\"block\"></div>\n    ))\n  }\n}\n\nexport default Ship\n","import React, { Component } from \"react\";\n\nimport Ship from \"./Ship\";\n\nexport class Ships extends Component {\n  state = {\n    lengths: [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0],\n    ],\n    direction: \"horizontal\",\n  };\n\n  rotateShips = () => {\n    let direction =\n      this.state.direction === \"horizontal\" ? \"vertical\" : \"horizontal\";\n\n    this.setState({ direction });\n  };\n\n  render() {\n    return (\n      <>\n        <div className={\"ships \" + this.state.direction}>\n          {this.state.lengths.map((length, id) => (\n            <div\n              className={\"ship \" + this.state.direction}\n              key={\"class\" + id}\n              draggable\n              onDragStart={(e) => this.props.onDragStart(e, [length.length, this.state.direction])}\n              onDragEnd={(e) => this.props.onDragEnd(e)}\n            >\n              <Ship\n                key={id}\n                id={id}\n                length={length}\n              />\n            </div>\n          ))}\n        </div>\n        <div className=\"buttons\">\n          <button onClick={this.rotateShips} title=\"Rotate Ships\">\n            <i className=\"fa fa-repeat\"></i>\n          </button>\n          <button onClick={this.props.autoPlace} title=\"Autoplace Ships\">\n            <i className=\"fa fa-refresh\"></i>\n          </button>\n          <button onClick={this.props.clearBoard} title=\"Remove All Ships\">\n            <i className=\"fa fa-remove\"></i>\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Ships;\n","import React, { Component } from \"react\";\n\nimport Ship from \"./Ship\";\n\nexport class Scoreboard extends Component {\n  state = {\n    lengths: [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0],\n    ],\n  };\n\n  setClass = (id) => {\n    if (this.props.computer.board.ships[id].ship.isSunk()) {\n      return \"ship horizontal sunk\";\n    } else {\n      return \"ship horizontal\";\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"ships scoreboard\">\n        <h2>Ships Sunk</h2>\n        {this.state.lengths.map((length, id) => (\n          <div className={this.setClass(id)} key={\"class\" + id}>\n            <Ship\n              key={id}\n              id={id}\n              length={length}\n              direction={this.state.direction}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Scoreboard;\n","import React, { useState, useRef } from \"react\";\n\nimport { Player } from \"../factories/Player\";\nimport Board from \"./Board\";\nimport Ships from \"./Ships\";\nimport Scoreboard from \"./Scoreboard\";\n\nconst Game = () => {\n  const [player, setPlayer] = useState(new Player(\"player\"));\n  const [computer, setComputer] = useState(new Player(\"computer\"));\n  const [turn, setTurn] = useState(1);\n  const [completed, setCompleted] = useState(false);\n  const [winner, setWinner] = useState(null);\n  const [shipsPlaced, setShipsPlaced] = useState(false);\n  player.enemy = computer;\n  computer.enemy = player;\n  computer.board.autoplaceShips();\n\n  const autoPlace = () => {\n    if (turn !== 1) return;\n    let updatePlayer = player;\n    updatePlayer.board.resetShips();\n    updatePlayer.board.autoplaceShips();\n    setPlayer({...updatePlayer});\n    setShipsPlaced(true);\n  };\n\n  const clearBoard = () => {\n    if (turn !== 1) return;\n    let updatePlayer = player;\n    player.board.resetShips();\n    setPlayer({...updatePlayer});\n    setShipsPlaced(false);\n  };\n\n  const getAttack = (coord) => {\n    if (!shipsPlaced || turn % 2 === 0 || winner) return;\n\n    let updatePlayer = player;\n    coord = coord.split(\",\");\n    if (!updatePlayer.isLegal(coord)) return;\n    updatePlayer.attack(coord);\n\n    let enemy = updatePlayer.enemy;\n    setPlayer({...updatePlayer});\n    setComputer({...enemy});\n\n    isGameOver();\n    computerAttack();\n  };\n\n  const noAttack = () => {\n    return;\n  };\n\n  const computerAttack = () => {\n    let updateComputer = computer;\n    if (updateComputer.attack() === false) {\n      computerAttack();\n    } else {\n      setTurn(turn + 2);\n      let enemy = updateComputer.enemy;\n      setPlayer({...enemy});\n      setComputer({...updateComputer});\n    }\n    isGameOver();\n  };\n\n  const isGameOver = () => {\n    if (shipsPlaced && player.board.areAllSunk()) {\n      setWinner(computer.name);\n      setCompleted(true);\n    } else if (computer.board.areAllSunk()) {\n      setWinner(player.name);\n      setCompleted(true);\n    } else {\n      return false;\n    }\n\n    declareWinner();\n  };\n\n  const resetGame = () => {\n    setPlayer(new Player('player'));\n    setComputer(new Player('computer'));\n    player.enemy = computer;\n    computer.enemy = player;\n    computer.board.autoplaceShips();\n    setTurn(1);\n    setCompleted(false);\n    setWinner(null);\n    setShipsPlaced(false);\n  }\n\n  const declareWinner = () => {\n    if (winner === 'computer') {\n      return (\n        <div className=\"info\">\n          <h2 className=\"winner\">Too bad, the computer won!</h2>\n          <button onClick={resetGame} title=\"Play Again\">\n            <i className=\"fa fa-refresh\"></i>\n          </button>\n        </div>\n      )\n    } else if (winner === 'player') {\n      return (\n        <div className=\"info\">\n          <h2 className=\"winner\">Congrats! You've won!</h2>\n          <button onClick={resetGame} title=\"Play Again\">\n            <i className=\"fa fa-refresh\"></i>\n          </button>\n        </div>\n      )\n    }\n  };\n\n  const dragItem = useRef();\n  const dragOverItem = useRef();\n\n  const onDragStart = (e, position) => {\n    if (shipsPlaced) return;\n    dragItem.current = position;\n  }\n\n  const onDragEnter = (e, position) => {\n    if (shipsPlaced) return;\n    dragOverItem.current = position;\n    console.log(dragOverItem.current);\n  }\n\n  const onDragLeave = (e) => {\n    dragOverItem.current = null;\n  }\n\n  const drop = (e) => {\n    if (shipsPlaced || !dragOverItem.current) return;\n    let updatePlayer = player;\n    updatePlayer.board.placeShip(dragItem.current[0], dragOverItem.current, dragItem.current[1]);\n\n    setPlayer({...updatePlayer});\n    if (player.board.ships.length === 5) setShipsPlaced(true);\n    dragItem.current = null;\n    dragOverItem.current = null;\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Battleship</h1>\n      {turn === 1 && \n        <div className=\"info\">\n          <h2>Place your ships, then click on your enemy's board to start the game!</h2>\n        </div>\n      }\n      {declareWinner()}\n      <div className=\"wrapper\">\n        <div className=\"ships-wrapper\">\n          <Ships autoPlace={autoPlace} clearBoard={clearBoard} onDragStart={onDragStart} onDragEnd={drop} />\n        </div>\n        <div className=\"board-wrapper\">\n          <div className=\"board\">\n            <Board\n              player={player}\n              getAttack={noAttack}\n              completed={completed}\n              onDragEnter={onDragEnter}\n              onDragLeave={onDragLeave}\n            />\n          </div>\n          <div className=\"board\">\n            <Board\n              player={computer}\n              getAttack={getAttack}\n              completed={completed}\n            />\n          </div>\n        </div>\n        <div className=\"ships-wrapper\">\n          <Scoreboard computer={computer} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\n\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}