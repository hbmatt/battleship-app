{"version":3,"sources":["factories/Ship.js","factories/Gameboard.js","factories/Player.js","components/Column.js","components/Board.js","components/Ship.js","components/Ships.js","components/Scoreboard.js","components/Game.js","App.js","index.js"],"names":["Ship","length","hit","num","hits","isSunk","every","i","this","Array","fill","Gameboard","placeShip","coordinates","direction","ship","x","y","isOffBoard","isOccupied","id","ships","push","position","grid","autoplaceShips","lengths","coord","getRandCoord","getRandDirection","success","resetShips","receiveAttack","indexOf","areAllSunk","obj","Math","floor","random","Player","name","attack","isLegal","successfulAttack","getAdjacentCoords","attackQueue","shift","attacks","enemy","board","attackedShip","find","pos","offset","Column","getClass","cell","props","player","completed","getText","className","col","reverse","map","key","colId","onClick","getAttack","bind","Component","Board","Ships","state","rotateShips","setState","title","autoPlace","clearBoard","Scoreboard","setClass","computer","Game","turn","winner","split","isGameOver","computerAttack","noAttack","declareWinner","resetGame","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a774133.chunk.js","sourcesContent":["class Ship {\n  constructor(length) {\n    this.length = length;\n    this.hits = Array(length).fill(0);\n  }\n\n  hit = (num) => {\n    this.hits[num - 1] = 1;\n  };\n\n  isSunk = () => {\n    return this.hits.every((i) => i === 1) ? true : false;\n  };\n}\n\nexport { Ship };\n","import { Ship } from \"./Ship\";\n\nclass Gameboard {\n  constructor() {\n    this.grid = [];\n    for (let i = 0; i < 10; i++) {\n      this.grid[i] = Array(10).fill(0);\n    }\n    this.ships = [];\n  }\n\n  placeShip = (length, coordinates, direction) => {\n    const ship = new Ship(length);\n    const x = coordinates[0] - 1;\n    const y = coordinates[1] - 1;\n\n    if (\n      this.isOffBoard(direction, x, y, length) ||\n      this.isOccupied(direction, x, y, length)\n    ) {\n      return false;\n    }\n\n    const id = this.ships.length + 1;\n    this.ships.push({ id, ship, position: [] });\n\n    for (let i = 0; i < ship.length; i++) {\n      if (direction === \"horizontal\") {\n        this.grid[x + i][y] = id;\n        this.ships[id - 1].position.push(`${x + i}, ${y}`);\n      } else {\n        this.grid[x][y + i] = id;\n        this.ships[id - 1].position.push(`${x}, ${y + i}`);\n      }\n    }\n  };\n\n  autoplaceShips = () => {\n    let lengths = [2,3,3,4,5];\n    let i = 4;\n\n    while (this.ships.length < 5) {\n      let coord = this.getRandCoord();\n      let direction = this.getRandDirection();\n\n      let success = this.placeShip(lengths[i], coord, direction);\n\n      while (success === false) {\n        coord = this.getRandCoord();\n        direction = this.getRandDirection();\n        success = this.placeShip(lengths[i], coord, direction);\n      }\n      \n      i--;\n    }\n  }\n\n  resetShips = () => {\n    this.ships = [];\n    this.grid = [];\n    for (let i = 0; i < 10; i++) {\n      this.grid[i] = Array(10).fill(0);\n    }\n  }\n \n  receiveAttack = (coordinates) => {\n    const x = coordinates[0] - 1;\n    const y = coordinates[1] - 1;\n\n    if (this.grid[x][y] > 0) {\n      const id = this.grid[x][y];\n      const position = this.ships[id - 1].position.indexOf(`${x}, ${y}`);\n      this.ships[id - 1].ship.hit(position + 1);\n      this.grid[x][y] = \"X\";\n      return id;\n    } else {\n      this.grid[x][y] = \"O\";\n      return false;\n    }\n  };\n\n  areAllSunk = () => {\n    return this.ships.every((obj) => obj.ship.isSunk() === true) ? true : false;\n  };\n\n  isOffBoard(direction, x, y, length) {\n    return (direction === \"horizontal\" && x + length - 1 < 10) ||\n      (direction === \"vertical\" && y + length - 1 < 10)\n      ? false\n      : true;\n  }\n\n  isOccupied(direction, x, y, length) {\n    for (let i = 0; i < length; i++) {\n      if (direction === \"horizontal\") {\n        if (this.grid[x + i][y] !== 0) {\n          return true;\n        }\n      } else {\n        if (this.grid[x][y + i] !== 0) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  getRandCoord() {\n    return [Math.floor(Math.random() * 10) + 1, Math.floor(Math.random() * 10) + 1];\n  }\n\n  getRandDirection() {\n    return Math.floor(Math.random() * 2) === 0 ? 'horizontal' : 'vertical';\n  }\n}\n\nexport { Gameboard };\n","import { Gameboard } from \"./Gameboard\";\n\nclass Player {\n  constructor(name) {\n    this.name = name;\n    this.enemy = \"\";\n    this.board = new Gameboard();\n    this.attacks = [];\n    this.successfulAttack = null;\n    this.attackQueue = [];\n    this.attackedShip = null;\n  }\n\n  attack = (coordinates = this.getRandCoord()) => {\n    if (this.name === \"computer\" && !this.isLegal(coordinates)) return false;\n\n    if (this.successfulAttack) this.getAdjacentCoords();\n\n    if (this.attackQueue.length > 0) {\n      coordinates = this.attackQueue[0];\n      this.attackQueue.shift();\n    }\n\n    this.attacks.push(`${coordinates[0] - 1}, ${coordinates[1] - 1}`);\n    let id = this.enemy.board.receiveAttack(coordinates);\n\n    if (this.name === \"computer\" && id) {\n      this.successfulAttack = coordinates;\n      this.attackedShip = this.enemy.board.ships[id - 1].ship;\n    } else {\n      this.successfulAttack = null;\n    }\n\n    if (this.attackedShip) {\n      if (this.attackedShip.isSunk()) {\n        this.successfulAttack = null;\n        this.attackQueue = [];\n        this.attackedShip = null;\n      }\n    }\n  };\n\n  isLegal(coordinates) {\n    return this.attacks.find(\n      (pos) => pos === `${coordinates[0] - 1}, ${coordinates[1] - 1}`\n    )\n      ? false\n      : true;\n  }\n\n  getRandCoord() {\n    return [Math.floor(Math.random() * 10) + 1, Math.floor(Math.random() * 10) + 1];\n  }\n\n  getAdjacentCoords() {\n    let offset = [[-1,0],[0,1],[1,0],[0,-1]];\n\n    for (let i = 0; i < 4; i++) {\n      let x = this.successfulAttack[0] + offset[i][0];\n      let y = this.successfulAttack[1] + offset[i][1];\n      \n      if (x >= 1 && x <= 10 && y >= 1 && y <= 10 && this.isLegal([x,y])) {\n        this.attackQueue.push([x,y]);\n      }\n    }\n  }\n}\n\nexport { Player };\n","import React, { Component } from \"react\";\n\nexport class Column extends Component {\n  getClass = (cell) => {\n    if (this.props.player.name === \"computer\") {\n      switch (cell) {\n        case \"X\":\n          return \"cell hit\";\n        case \"O\":\n          return \"cell miss\";\n        default:\n          return this.props.completed ? \"cell\" : \"cell open\";\n      }\n    }\n\n    switch (cell) {\n      case 1:\n        return \"cell carrier\";\n      case 2:\n        return \"cell battleship\";\n      case 3:\n        return \"cell destroyer\";\n      case 4:\n        return \"cell submarine\";\n      case 5:\n        return \"cell patrol\";\n      case \"X\":\n        return \"cell hit\";\n      case \"O\":\n        return \"cell miss\";\n      default:\n        return \"cell\";\n    }\n  };\n\n  getText = (cell) => {\n    switch (cell) {\n      case \"O\":\n        return <i className=\"fa fa-circle\"></i>;\n      default:\n        return \"\";\n    }\n  };\n\n  render() {\n    return [...this.props.col].reverse().map((cell, id) => (\n      <div\n        key={`${this.props.colId}${10 - id}`}\n        className={this.getClass(cell)}\n        onClick={this.props.getAttack.bind(\n          this,\n          `${this.props.colId},${10 - id}`\n        )}\n      >\n        {this.getText(cell)}\n      </div>\n    ));\n  }\n}\n\nexport default Column;\n","import React, { Component } from \"react\";\n\nimport Column from \"./Column\";\n\nexport class Board extends Component {\n  render() {\n    return [...this.props.player.board.grid].map((col, id) => (\n      <div key={\"column\" + id} className=\"column\">\n        <Column\n          key={\"col\" + id}\n          col={col}\n          colId={id + 1}\n          player={this.props.player}\n          getAttack={this.props.getAttack}\n          completed={this.props.completed}\n        />\n      </div>\n    ));\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react'\n\nexport class Ship extends Component {\n  render() {\n    return this.props.length.map((cell,id) => (\n      <div key={id} className=\"block\"></div>\n    ))\n  }\n}\n\nexport default Ship\n","import React, { Component } from \"react\";\n\nimport Ship from \"./Ship\";\n\nexport class Ships extends Component {\n  state = {\n    lengths: [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0],\n    ],\n    direction: \"horizontal\",\n  };\n\n  rotateShips = () => {\n    let direction =\n      this.state.direction === \"horizontal\" ? \"vertical\" : \"horizontal\";\n\n    this.setState({ direction });\n  };\n\n  render() {\n    return (\n      <>\n        <div className={\"ships \" + this.state.direction}>\n          {this.state.lengths.map((length, id) => (\n            <div className={\"ship \" + this.state.direction} key={\"class\" + id}>\n              <Ship\n                key={id}\n                id={id}\n                length={length}\n              />\n            </div>\n          ))}\n        </div>\n        <div className=\"buttons\">\n          <button onClick={this.rotateShips} title=\"Rotate Ships\">\n            <i className=\"fa fa-repeat\"></i>\n          </button>\n          <button onClick={this.props.autoPlace} title=\"Autoplace Ships\">\n            <i className=\"fa fa-refresh\"></i>\n          </button>\n          <button onClick={this.props.clearBoard} title=\"Remove All Ships\">\n            <i className=\"fa fa-remove\"></i>\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Ships;\n","import React, { Component } from \"react\";\n\nimport Ship from \"./Ship\";\n\nexport class Scoreboard extends Component {\n  state = {\n    lengths: [\n      [0, 0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0],\n      [0, 0, 0],\n      [0, 0],\n    ],\n  };\n\n  setClass = (id) => {\n    if (this.props.computer.board.ships[id].ship.isSunk()) {\n      return \"ship horizontal sunk\";\n    } else {\n      return \"ship horizontal\";\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"ships scoreboard\">\n        <h2>Ships Sunk</h2>\n        {this.state.lengths.map((length, id) => (\n          <div className={this.setClass(id)} key={\"class\" + id}>\n            <Ship\n              key={id}\n              id={id}\n              length={length}\n              direction={this.state.direction}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Scoreboard;\n","import React, { Component } from \"react\";\n\nimport { Player } from \"../factories/Player\";\nimport Board from \"./Board\";\nimport Ships from \"./Ships\";\nimport Scoreboard from \"./Scoreboard\";\n\nexport class Game extends Component {\n  constructor(props) {\n    super(props);\n    const player = new Player(\"player\");\n    const computer = new Player(\"computer\");\n    player.enemy = computer;\n    computer.enemy = player;\n    player.board.autoplaceShips();\n    computer.board.autoplaceShips();\n    this.state = {\n      player,\n      computer,\n      turn: 1,\n      completed: false,\n      winner: null,\n    };\n  }\n\n  autoPlace = () => {\n    let player = this.state.player;\n\n    player.board.resetShips();\n    player.board.autoplaceShips();\n\n    this.setState({ player });\n  };\n\n  clearBoard = () => {\n    let player = this.state.player;\n    player.board.resetShips();\n\n    this.setState({ player });\n  };\n\n  getAttack = (coord) => {\n    if (this.state.turn % 2 === 0 || this.state.winner) return;\n\n    let player = this.state.player;\n\n    coord = coord.split(\",\");\n\n    if (!player.isLegal(coord)) return;\n\n    player.attack(coord);\n\n    let computer = player.enemy;\n\n    this.setState({ player, computer });\n\n    this.isGameOver();\n    this.computerAttack();\n  };\n\n  noAttack = () => {\n    return;\n  };\n\n  computerAttack = () => {\n    let computer = this.state.computer;\n\n    if (computer.attack() === false) {\n      this.computerAttack();\n    } else {\n      let turn = this.state.turn + 2;\n      let player = computer.enemy;\n\n      this.setState({ player, computer, turn });\n    }\n    this.isGameOver();\n  };\n\n  isGameOver = () => {\n    let player = this.state.player;\n    let computer = this.state.computer;\n\n    if (player.board.areAllSunk()) {\n      this.setState({ winner: computer.name, completed: true });\n    } else if (computer.board.areAllSunk()) {\n      this.setState({ winner: player.name, completed: true });\n    } else {\n      return false;\n    }\n\n    this.declareWinner();\n  };\n\n  resetGame = () => {\n    let player = new Player('player');\n    let computer = new Player('computer');\n    player.enemy = computer;\n    computer.enemy = player;\n    player.board.autoplaceShips();\n    computer.board.autoplaceShips();\n    this.setState({\n      player,\n      computer,\n      turn: 1,\n      completed: false,\n      winner: null,\n    });\n  }\n\n  declareWinner = () => {\n    if (this.state.winner === 'computer') {\n      return (\n        <div className=\"info\">\n          <h2 className=\"winner\">Too bad, the computer won!</h2>\n          <button onClick={this.resetGame} title=\"Play Again\">\n            <i className=\"fa fa-refresh\"></i>\n          </button>\n        </div>\n      )\n    } else if (this.state.winner === 'player') {\n      return (\n        <div className=\"info\">\n          <h2 className=\"winner\">Congrats! You've won!</h2>\n          <button onClick={this.resetGame} title=\"Play Again\">\n            <i className=\"fa fa-refresh\"></i>\n          </button>\n        </div>\n      )\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Battleship</h1>\n        {this.declareWinner()}\n        <div className=\"wrapper\">\n          <div className=\"ships-wrapper\">\n            <Ships autoPlace={this.autoPlace} clearBoard={this.clearBoard} />\n          </div>\n          <div className=\"board-wrapper\">\n            <div className=\"board\">\n              <Board\n                player={this.state.player}\n                getAttack={this.noAttack}\n                completed={this.state.completed}\n              />\n            </div>\n            <div className=\"board\">\n              <Board\n                player={this.state.computer}\n                getAttack={this.getAttack}\n                completed={this.state.completed}\n              />\n            </div>\n          </div>\n          <div className=\"ships-wrapper\">\n            <Scoreboard computer={this.state.computer} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\n\nimport Game from './components/Game'\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}